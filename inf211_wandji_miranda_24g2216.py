# -*- coding: utf-8 -*-
"""inf211-wandji-miranda-24G2216.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zncZ_PO3pYYFaBRYudQyQ9kpQUO5v-PS
"""

# ==========================================
#   Nom et prenoms: WANDJI MIRANDA BRUNELLE
#   Matricule: 24G2216
# ==========================================

# ============================================================
#  Script complet : R√©cup√©ration et analyse de commentaires YouTube avec Gemini
# ============================================================

# =========================
#  Installation des d√©pendances (sp√©cial Google Colab)
# =========================
!pip install --upgrade google-api-python-client google-generativeai

# =========================
# Importation des biblioth√®ques
# =========================
import googleapiclient.discovery
import googleapiclient.errors
import google.generativeai as genai 
from urllib.parse import urlparse, parse_qs

# =========================
#  Configuration des cl√©s API
# =========================

#  Remplace par tes propres cl√©s API
YOUTUBE_API_KEY = "AQ.Ab8RN6KIqEDNjFS1AO4jb7gRuiz2a6Z5aHT0kJdTgIaF4skrmg"
GEMINI_API_KEY =  "AIzaSyB-vA6399UpYiN4seziAlupuALeZyVN1d8"
# V√©rification simple
if YOUTUBE_API_KEY.startswith("TA_") or GEMINI_API_KEY.startswith("TA_"):
    print("‚ùå Attention : vous devez remplacer les cl√©s API par vos vraies cl√©s.")
else:
    print("‚úÖ Cl√©s API configur√©es correctement.")

# Configurer Gemini
genai.configure(api_key=GEMINI_API_KEY)

# =========================
# üìå Extraction de l'ID vid√©o depuis une URL
# =========================
def extract_video_id(youtube_url):
    """
    Extrait l'ID d'une vid√©o YouTube √† partir du lien complet.
    """
    try:
        parsed_url = urlparse(youtube_url)
        if parsed_url.hostname in ['www.youtube.com', 'youtube.com']:
            query = parse_qs(parsed_url.query)
            return query.get('v', [None])[0]
        elif parsed_url.hostname == 'youtu.be':
            return parsed_url.path[1:]
        else:
            return None
    except Exception as e:
        print(f"Erreur lors de l'extraction de l'ID : {e}")
        return None

# =========================
#  R√©cup√©ration des commentaires YouTube
# =========================
def get_video_comments(api_key, video_id, max_comments=200):
    youtube = googleapiclient.discovery.build("youtube", "v3", developerKey=api_key)

    comments = []
    try:
        request = youtube.commentThreads().list(
            part="snippet",
            videoId=video_id,
            maxResults=100,
            textFormat="plainText"
        )
        response = request.execute()

        while response and len(comments) < max_comments:
            for item in response['items']:
                comment = item['snippet']['topLevelComment']['snippet']
                comments.append(comment['textDisplay'])

                if len(comments) >= max_comments:
                    break

            if 'nextPageToken' in response and len(comments) < max_comments:
                request = youtube.commentThreads().list(
                    part="snippet",
                    videoId=video_id,
                    pageToken=response['nextPageToken'],
                    maxResults=100,
                    textFormat="plainText"
                )
                response = request.execute()
            else:
                break

        return comments

    except googleapiclient.errors.HttpError as e:
        print(f"‚ùå Erreur API YouTube : {e}")
        return []

# =========================
#  Analyse des commentaires avec Gemini
# =========================
def analyze_with_gemini(comments):
    if not comments:
        return "‚ùå Aucun commentaire disponible pour analyser la vid√©o."

    # On limite √† 50 commentaires pour √©viter une surcharge
    sample = comments[:50]

    model = genai.GenerativeModel("gemini-2.5-pro")

    prompt = f"""
    Voici une liste de commentaires d'une vid√©o YouTube :

    {sample}

    ‚û°Ô∏è Analyse ces retours et r√©ponds clairement :
    1. La vid√©o est-elle pertinente ou non ? (Oui / Non)
    2. Pour quel type de spectateurs ?
    3. Donne une note de pertinence sur 10
    4. Fais un r√©sum√© rapide de l'avis g√©n√©ral
    """

    response = model.generate_content(prompt)
    return response.text

# =========================
#  Fonction principale : √©valuation d'une vid√©o
# =========================
def evaluate_youtube_video(video_id):
    comments = get_video_comments(YOUTUBE_API_KEY, video_id)
    result = analyze_with_gemini(comments)
    return result

# =========================
# üé¨ Ex√©cution
# =========================
if __name__ == "__main__":
    youtube_url = input("Collez le lien de la vid√©o YouTube : ").strip()

    video_id = extract_video_id(youtube_url)

    if not video_id:
        print("‚ùå Impossible d'extraire l'ID de la vid√©o. V√©rifiez le lien.")
    else:
        analysis = evaluate_youtube_video(video_id)
        print("\n=== R√©sultat de l'analyse ===\n")
        print(analysis)